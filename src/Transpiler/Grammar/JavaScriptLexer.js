// Generated from JavaScriptLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


import JavaScriptLexerBase from './JavaScriptLexerBase.js';

const serializedATN = [4,0,154,1503,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,
7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,
7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,
2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,
32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,
46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,
2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,
61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,
7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,
75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,
2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,
7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,
2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,
2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,
2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,
2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,
2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,
2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,
2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,
2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,
2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,
2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,
2,182,7,182,2,183,7,183,1,0,1,0,1,0,1,0,1,0,5,0,379,8,0,10,0,12,0,382,9,
0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,
18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,
1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,
40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,
1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,555,8,57,1,58,1,58,1,58,1,58,5,58,
561,8,58,10,58,12,58,564,9,58,1,58,3,58,567,8,58,1,58,1,58,1,58,5,58,572,
8,58,10,58,12,58,575,9,58,1,58,3,58,578,8,58,1,58,1,58,3,58,582,8,58,3,58,
584,8,58,1,59,1,59,1,59,1,59,5,59,590,8,59,10,59,12,59,593,9,59,1,60,1,60,
4,60,597,8,60,11,60,12,60,598,1,60,1,60,1,61,1,61,1,61,1,61,5,61,607,8,61,
10,61,12,61,610,9,61,1,62,1,62,1,62,1,62,5,62,616,8,62,10,62,12,62,619,9,
62,1,63,1,63,1,63,1,63,5,63,625,8,63,10,63,12,63,628,9,63,1,63,1,63,1,64,
1,64,1,64,1,64,5,64,636,8,64,10,64,12,64,639,9,64,1,64,1,64,1,65,1,65,1,
65,1,65,5,65,647,8,65,10,65,12,65,650,9,65,1,65,1,65,1,66,1,66,1,66,1,67,
1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,
74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,
1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,
83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,
1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,
87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,
94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,
1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
98,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,101,
1,101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,
1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,
1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,111,
1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,116,1,116,
1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,
1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
1,118,1,118,1,118,1,119,1,119,5,119,1009,8,119,10,119,12,119,1012,9,119,
1,120,1,120,5,120,1016,8,120,10,120,12,120,1019,9,120,1,120,1,120,1,120,
5,120,1024,8,120,10,120,12,120,1027,9,120,1,120,3,120,1030,8,120,1,120,1,
120,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1040,8,121,1,121,1,121,1,121,
1,121,1,121,1,121,1,121,3,121,1049,8,121,1,121,1,121,1,121,1,121,1,121,4,
121,1056,8,121,11,121,12,121,1057,1,122,1,122,1,122,1,122,1,122,1,123,4,
123,1066,8,123,11,123,12,123,1067,1,123,1,123,1,124,1,124,1,124,1,124,1,
125,1,125,1,125,1,125,1,125,5,125,1081,8,125,10,125,12,125,1084,9,125,1,
125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,5,126,1096,8,126,
10,126,12,126,1099,9,126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,
1,127,5,127,1110,8,127,10,127,12,127,1113,9,127,1,127,1,127,1,128,1,128,
1,128,5,128,1120,8,128,10,128,12,128,1123,9,128,1,128,1,128,1,128,5,128,
1128,8,128,10,128,12,128,1131,9,128,1,129,1,129,1,129,1,129,1,129,1,129,
5,129,1139,8,129,10,129,12,129,1142,9,129,1,129,1,129,1,129,1,129,1,129,
1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
5,130,1161,8,130,10,130,12,130,1164,9,130,1,130,1,130,1,130,1,130,1,130,
1,130,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
1,132,1,132,1,132,1,132,5,132,1187,8,132,10,132,12,132,1190,9,132,1,132,
1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,1,134,
1,134,1,134,1,134,1,134,1,135,1,135,1,136,1,136,1,136,1,136,1,137,1,137,
1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,140,1,140,
1,140,1,140,1,140,1,141,1,141,5,141,1234,8,141,10,141,12,141,1237,9,141,
1,142,4,142,1240,8,142,11,142,12,142,1241,1,142,1,142,1,143,1,143,1,143,
1,143,1,144,1,144,1,144,1,144,5,144,1254,8,144,10,144,12,144,1257,9,144,
1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,5,145,1268,8,145,10,
145,12,145,1271,9,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,3,146,1280,
8,146,1,147,4,147,1283,8,147,11,147,12,147,1284,1,148,1,148,1,148,1,148,
1,149,1,149,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,151,
1,151,1,151,1,151,1,152,1,152,5,152,1308,8,152,10,152,12,152,1311,9,152,
1,153,1,153,1,153,1,153,1,154,4,154,1318,8,154,11,154,12,154,1319,1,154,
1,154,1,155,3,155,1325,8,155,1,156,4,156,1328,8,156,11,156,12,156,1329,1,
156,3,156,1333,8,156,1,157,1,157,4,157,1337,8,157,11,157,12,157,1338,1,158,
4,158,1342,8,158,11,158,12,158,1343,1,158,3,158,1347,8,158,1,159,1,159,5,
159,1351,8,159,10,159,12,159,1354,9,159,1,159,1,159,1,160,1,160,5,160,1360,
8,160,10,160,12,160,1363,9,160,1,160,1,160,1,161,3,161,1368,8,161,1,162,
1,162,1,162,1,162,3,162,1374,8,162,1,163,1,163,1,164,1,164,1,164,1,164,3,
164,1382,8,164,1,165,1,165,1,165,1,165,3,165,1388,8,165,1,166,1,166,1,166,
1,166,1,166,3,166,1395,8,166,1,167,1,167,3,167,1399,8,167,1,168,1,168,1,
168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,4,
169,1415,8,169,11,169,12,169,1416,1,169,1,169,3,169,1421,8,169,1,170,1,170,
1,170,4,170,1426,8,170,11,170,12,170,1427,1,170,1,170,1,171,1,171,1,172,
1,172,1,173,1,173,3,173,1438,8,173,1,174,1,174,1,174,1,175,1,175,1,176,1,
176,1,176,5,176,1448,8,176,10,176,12,176,1451,9,176,3,176,1453,8,176,1,177,
1,177,3,177,1457,8,177,1,177,4,177,1460,8,177,11,177,12,177,1461,1,178,1,
178,3,178,1466,8,178,1,179,1,179,1,179,3,179,1471,8,179,1,180,1,180,1,180,
1,180,5,180,1477,8,180,10,180,12,180,1480,9,180,1,180,3,180,1483,8,180,1,
181,1,181,1,181,1,181,5,181,1489,8,181,10,181,12,181,1492,9,181,1,181,3,
181,1495,8,181,1,182,1,182,3,182,1499,8,182,1,183,1,183,1,183,6,1082,1097,
1140,1162,1188,1255,0,184,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,
25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,
49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,
73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,
97,47,99,48,101,49,103,50,105,51,107,52,109,53,111,54,113,55,115,56,117,
57,119,58,121,59,123,60,125,61,127,62,129,63,131,64,133,65,135,66,137,67,
139,68,141,69,143,70,145,71,147,72,149,73,151,74,153,75,155,76,157,77,159,
78,161,79,163,80,165,81,167,82,169,83,171,84,173,85,175,86,177,87,179,88,
181,89,183,90,185,91,187,92,189,93,191,94,193,95,195,96,197,97,199,98,201,
99,203,100,205,101,207,102,209,103,211,104,213,105,215,106,217,107,219,108,
221,109,223,110,225,111,227,112,229,113,231,114,233,115,235,116,237,117,
239,118,241,119,243,120,245,121,247,122,249,123,251,124,253,125,255,126,
257,127,259,128,261,129,263,130,265,131,267,132,269,133,271,0,273,134,275,
135,277,136,279,137,281,138,283,139,285,140,287,141,289,142,291,143,293,
144,295,145,297,146,299,147,301,148,303,149,305,150,307,151,309,152,311,
153,313,154,315,0,317,0,319,0,321,0,323,0,325,0,327,0,329,0,331,0,333,0,
335,0,337,0,339,0,341,0,343,0,345,0,347,0,349,0,351,0,353,0,355,0,357,0,
359,0,361,0,363,0,365,0,367,0,369,0,371,0,5,0,1,2,3,4,35,3,0,10,10,13,13,
8232,8233,1,0,48,57,2,0,48,57,95,95,2,0,88,88,120,120,3,0,48,57,65,70,97,
102,1,0,48,55,2,0,79,79,111,111,2,0,48,55,95,95,2,0,66,66,98,98,1,0,48,49,
2,0,48,49,95,95,5,0,46,57,61,61,63,63,65,90,97,122,4,0,9,9,11,12,32,32,160,
160,1,0,96,96,2,0,60,60,123,123,7,0,35,35,43,59,61,61,63,63,65,90,95,95,
97,122,1,0,34,34,1,0,39,39,8,0,58,58,65,90,97,122,8304,8591,11264,12271,
12289,55295,63744,64975,65008,65533,2,0,45,46,95,95,3,0,183,183,768,879,
8255,8256,2,0,34,34,92,92,2,0,39,39,92,92,9,0,34,34,39,39,92,92,98,98,102,
102,110,110,114,114,116,116,118,118,12,0,10,10,13,13,34,34,39,39,48,57,92,
92,98,98,102,102,110,110,114,114,116,118,120,120,3,0,48,57,117,117,120,120,
4,0,48,57,65,70,95,95,97,102,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,
408,0,48,57,95,95,768,879,1155,1159,1425,1469,1471,1471,1473,1474,1476,1477,
1479,1479,1552,1562,1611,1641,1648,1648,1750,1756,1759,1764,1767,1768,1770,
1773,1776,1785,1809,1809,1840,1866,1958,1968,1984,1993,2027,2035,2045,2045,
2070,2073,2075,2083,2085,2087,2089,2093,2137,2139,2200,2207,2250,2273,2275,
2306,2362,2362,2364,2364,2369,2376,2381,2381,2385,2391,2402,2403,2406,2415,
2433,2433,2492,2492,2497,2500,2509,2509,2530,2531,2534,2543,2558,2558,2561,
2562,2620,2620,2625,2626,2631,2632,2635,2637,2641,2641,2662,2673,2677,2677,
2689,2690,2748,2748,2753,2757,2759,2760,2765,2765,2786,2787,2790,2799,2810,
2815,2817,2817,2876,2876,2879,2879,2881,2884,2893,2893,2901,2902,2914,2915,
2918,2927,2946,2946,3008,3008,3021,3021,3046,3055,3072,3072,3076,3076,3132,
3132,3134,3136,3142,3144,3146,3149,3157,3158,3170,3171,3174,3183,3201,3201,
3260,3260,3263,3263,3270,3270,3276,3277,3298,3299,3302,3311,3328,3329,3387,
3388,3393,3396,3405,3405,3426,3427,3430,3439,3457,3457,3530,3530,3538,3540,
3542,3542,3558,3567,3633,3633,3636,3642,3655,3662,3664,3673,3761,3761,3764,
3772,3784,3790,3792,3801,3864,3865,3872,3881,3893,3893,3895,3895,3897,3897,
3953,3966,3968,3972,3974,3975,3981,3991,3993,4028,4038,4038,4141,4144,4146,
4151,4153,4154,4157,4158,4160,4169,4184,4185,4190,4192,4209,4212,4226,4226,
4229,4230,4237,4237,4240,4249,4253,4253,4957,4959,5906,5908,5938,5939,5970,
5971,6002,6003,6068,6069,6071,6077,6086,6086,6089,6099,6109,6109,6112,6121,
6155,6157,6159,6169,6277,6278,6313,6313,6432,6434,6439,6440,6450,6450,6457,
6459,6470,6479,6608,6617,6679,6680,6683,6683,6742,6742,6744,6750,6752,6752,
6754,6754,6757,6764,6771,6780,6783,6793,6800,6809,6832,6845,6847,6862,6912,
6915,6964,6964,6966,6970,6972,6972,6978,6978,6992,7001,7019,7027,7040,7041,
7074,7077,7080,7081,7083,7085,7088,7097,7142,7142,7144,7145,7149,7149,7151,
7153,7212,7219,7222,7223,7232,7241,7248,7257,7376,7378,7380,7392,7394,7400,
7405,7405,7412,7412,7416,7417,7616,7679,8204,8205,8255,8256,8276,8276,8400,
8412,8417,8417,8421,8432,11503,11505,11647,11647,11744,11775,12330,12333,
12441,12442,42528,42537,42607,42607,42612,42621,42654,42655,42736,42737,
43010,43010,43014,43014,43019,43019,43045,43046,43052,43052,43204,43205,
43216,43225,43232,43249,43263,43273,43302,43309,43335,43345,43392,43394,
43443,43443,43446,43449,43452,43453,43472,43481,43493,43493,43504,43513,
43561,43566,43569,43570,43573,43574,43587,43587,43596,43596,43600,43609,
43644,43644,43696,43696,43698,43700,43703,43704,43710,43711,43713,43713,
43756,43757,43766,43766,44005,44005,44008,44008,44013,44013,44016,44025,
64286,64286,65024,65039,65056,65071,65075,65076,65101,65103,65296,65305,
65343,65343,66045,66045,66272,66272,66422,66426,66720,66729,68097,68099,
68101,68102,68108,68111,68152,68154,68159,68159,68325,68326,68900,68903,
68912,68921,69291,69292,69373,69375,69446,69456,69506,69509,69633,69633,
69688,69702,69734,69744,69747,69748,69759,69761,69811,69814,69817,69818,
69826,69826,69872,69881,69888,69890,69927,69931,69933,69940,69942,69951,
70003,70003,70016,70017,70070,70078,70089,70092,70095,70105,70191,70193,
70196,70196,70198,70199,70206,70206,70209,70209,70367,70367,70371,70378,
70384,70393,70400,70401,70459,70460,70464,70464,70502,70508,70512,70516,
70712,70719,70722,70724,70726,70726,70736,70745,70750,70750,70835,70840,
70842,70842,70847,70848,70850,70851,70864,70873,71090,71093,71100,71101,
71103,71104,71132,71133,71219,71226,71229,71229,71231,71232,71248,71257,
71339,71339,71341,71341,71344,71349,71351,71351,71360,71369,71453,71455,
71458,71461,71463,71467,71472,71481,71727,71735,71737,71738,71904,71913,
71995,71996,71998,71998,72003,72003,72016,72025,72148,72151,72154,72155,
72160,72160,72193,72202,72243,72248,72251,72254,72263,72263,72273,72278,
72281,72283,72330,72342,72344,72345,72752,72758,72760,72765,72767,72767,
72784,72793,72850,72871,72874,72880,72882,72883,72885,72886,73009,73014,
73018,73018,73020,73021,73023,73029,73031,73031,73040,73049,73104,73105,
73109,73109,73111,73111,73120,73129,73459,73460,73472,73473,73526,73530,
73536,73536,73538,73538,73552,73561,78912,78912,78919,78933,92768,92777,
92864,92873,92912,92916,92976,92982,93008,93017,94031,94031,94095,94098,
94180,94180,113821,113822,118528,118573,118576,118598,119143,119145,119163,
119170,119173,119179,119210,119213,119362,119364,120782,120831,121344,121398,
121403,121452,121461,121461,121476,121476,121499,121503,121505,121519,122880,
122886,122888,122904,122907,122913,122915,122916,122918,122922,123023,123023,
123184,123190,123200,123209,123566,123566,123628,123641,124140,124153,125136,
125142,125252,125258,125264,125273,130032,130041,917760,917999,661,0,36,
36,65,90,95,95,97,122,170,170,181,181,186,186,192,214,216,246,248,705,710,
721,736,740,748,748,750,750,880,884,886,887,890,893,895,895,902,902,904,
906,908,908,910,929,931,1013,1015,1153,1162,1327,1329,1366,1369,1369,1376,
1416,1488,1514,1519,1522,1568,1610,1646,1647,1649,1747,1749,1749,1765,1766,
1774,1775,1786,1788,1791,1791,1808,1808,1810,1839,1869,1957,1969,1969,1994,
2026,2036,2037,2042,2042,2048,2069,2074,2074,2084,2084,2088,2088,2112,2136,
2144,2154,2160,2183,2185,2190,2208,2249,2308,2361,2365,2365,2384,2384,2392,
2401,2417,2432,2437,2444,2447,2448,2451,2472,2474,2480,2482,2482,2486,2489,
2493,2493,2510,2510,2524,2525,2527,2529,2544,2545,2556,2556,2565,2570,2575,
2576,2579,2600,2602,2608,2610,2611,2613,2614,2616,2617,2649,2652,2654,2654,
2674,2676,2693,2701,2703,2705,2707,2728,2730,2736,2738,2739,2741,2745,2749,
2749,2768,2768,2784,2785,2809,2809,2821,2828,2831,2832,2835,2856,2858,2864,
2866,2867,2869,2873,2877,2877,2908,2909,2911,2913,2929,2929,2947,2947,2949,
2954,2958,2960,2962,2965,2969,2970,2972,2972,2974,2975,2979,2980,2984,2986,
2990,3001,3024,3024,3077,3084,3086,3088,3090,3112,3114,3129,3133,3133,3160,
3162,3165,3165,3168,3169,3200,3200,3205,3212,3214,3216,3218,3240,3242,3251,
3253,3257,3261,3261,3293,3294,3296,3297,3313,3314,3332,3340,3342,3344,3346,
3386,3389,3389,3406,3406,3412,3414,3423,3425,3450,3455,3461,3478,3482,3505,
3507,3515,3517,3517,3520,3526,3585,3632,3634,3635,3648,3654,3713,3714,3716,
3716,3718,3722,3724,3747,3749,3749,3751,3760,3762,3763,3773,3773,3776,3780,
3782,3782,3804,3807,3840,3840,3904,3911,3913,3948,3976,3980,4096,4138,4159,
4159,4176,4181,4186,4189,4193,4193,4197,4198,4206,4208,4213,4225,4238,4238,
4256,4293,4295,4295,4301,4301,4304,4346,4348,4680,4682,4685,4688,4694,4696,
4696,4698,4701,4704,4744,4746,4749,4752,4784,4786,4789,4792,4798,4800,4800,
4802,4805,4808,4822,4824,4880,4882,4885,4888,4954,4992,5007,5024,5109,5112,
5117,5121,5740,5743,5759,5761,5786,5792,5866,5873,5880,5888,5905,5919,5937,
5952,5969,5984,5996,5998,6000,6016,6067,6103,6103,6108,6108,6176,6264,6272,
6276,6279,6312,6314,6314,6320,6389,6400,6430,6480,6509,6512,6516,6528,6571,
6576,6601,6656,6678,6688,6740,6823,6823,6917,6963,6981,6988,7043,7072,7086,
7087,7098,7141,7168,7203,7245,7247,7258,7293,7296,7304,7312,7354,7357,7359,
7401,7404,7406,7411,7413,7414,7418,7418,7424,7615,7680,7957,7960,7965,7968,
8005,8008,8013,8016,8023,8025,8025,8027,8027,8029,8029,8031,8061,8064,8116,
8118,8124,8126,8126,8130,8132,8134,8140,8144,8147,8150,8155,8160,8172,8178,
8180,8182,8188,8305,8305,8319,8319,8336,8348,8450,8450,8455,8455,8458,8467,
8469,8469,8473,8477,8484,8484,8486,8486,8488,8488,8490,8493,8495,8505,8508,
8511,8517,8521,8526,8526,8579,8580,11264,11492,11499,11502,11506,11507,11520,
11557,11559,11559,11565,11565,11568,11623,11631,11631,11648,11670,11680,
11686,11688,11694,11696,11702,11704,11710,11712,11718,11720,11726,11728,
11734,11736,11742,11823,11823,12293,12294,12337,12341,12347,12348,12353,
12438,12445,12447,12449,12538,12540,12543,12549,12591,12593,12686,12704,
12735,12784,12799,13312,19903,19968,42124,42192,42237,42240,42508,42512,
42527,42538,42539,42560,42606,42623,42653,42656,42725,42775,42783,42786,
42888,42891,42954,42960,42961,42963,42963,42965,42969,42994,43009,43011,
43013,43015,43018,43020,43042,43072,43123,43138,43187,43250,43255,43259,
43259,43261,43262,43274,43301,43312,43334,43360,43388,43396,43442,43471,
43471,43488,43492,43494,43503,43514,43518,43520,43560,43584,43586,43588,
43595,43616,43638,43642,43642,43646,43695,43697,43697,43701,43702,43705,
43709,43712,43712,43714,43714,43739,43741,43744,43754,43762,43764,43777,
43782,43785,43790,43793,43798,43808,43814,43816,43822,43824,43866,43868,
43881,43888,44002,44032,55203,55216,55238,55243,55291,63744,64109,64112,
64217,64256,64262,64275,64279,64285,64285,64287,64296,64298,64310,64312,
64316,64318,64318,64320,64321,64323,64324,64326,64433,64467,64829,64848,
64911,64914,64967,65008,65019,65136,65140,65142,65276,65313,65338,65345,
65370,65382,65470,65474,65479,65482,65487,65490,65495,65498,65500,65536,
65547,65549,65574,65576,65594,65596,65597,65599,65613,65616,65629,65664,
65786,66176,66204,66208,66256,66304,66335,66349,66368,66370,66377,66384,
66421,66432,66461,66464,66499,66504,66511,66560,66717,66736,66771,66776,
66811,66816,66855,66864,66915,66928,66938,66940,66954,66956,66962,66964,
66965,66967,66977,66979,66993,66995,67001,67003,67004,67072,67382,67392,
67413,67424,67431,67456,67461,67463,67504,67506,67514,67584,67589,67592,
67592,67594,67637,67639,67640,67644,67644,67647,67669,67680,67702,67712,
67742,67808,67826,67828,67829,67840,67861,67872,67897,67968,68023,68030,
68031,68096,68096,68112,68115,68117,68119,68121,68149,68192,68220,68224,
68252,68288,68295,68297,68324,68352,68405,68416,68437,68448,68466,68480,
68497,68608,68680,68736,68786,68800,68850,68864,68899,69248,69289,69296,
69297,69376,69404,69415,69415,69424,69445,69488,69505,69552,69572,69600,
69622,69635,69687,69745,69746,69749,69749,69763,69807,69840,69864,69891,
69926,69956,69956,69959,69959,69968,70002,70006,70006,70019,70066,70081,
70084,70106,70106,70108,70108,70144,70161,70163,70187,70207,70208,70272,
70278,70280,70280,70282,70285,70287,70301,70303,70312,70320,70366,70405,
70412,70415,70416,70419,70440,70442,70448,70450,70451,70453,70457,70461,
70461,70480,70480,70493,70497,70656,70708,70727,70730,70751,70753,70784,
70831,70852,70853,70855,70855,71040,71086,71128,71131,71168,71215,71236,
71236,71296,71338,71352,71352,71424,71450,71488,71494,71680,71723,71840,
71903,71935,71942,71945,71945,71948,71955,71957,71958,71960,71983,71999,
71999,72001,72001,72096,72103,72106,72144,72161,72161,72163,72163,72192,
72192,72203,72242,72250,72250,72272,72272,72284,72329,72349,72349,72368,
72440,72704,72712,72714,72750,72768,72768,72818,72847,72960,72966,72968,
72969,72971,73008,73030,73030,73056,73061,73063,73064,73066,73097,73112,
73112,73440,73458,73474,73474,73476,73488,73490,73523,73648,73648,73728,
74649,74880,75075,77712,77808,77824,78895,78913,78918,82944,83526,92160,
92728,92736,92766,92784,92862,92880,92909,92928,92975,92992,92995,93027,
93047,93053,93071,93760,93823,93952,94026,94032,94032,94099,94111,94176,
94177,94179,94179,94208,100343,100352,101589,101632,101640,110576,110579,
110581,110587,110589,110590,110592,110882,110898,110898,110928,110930,110933,
110933,110948,110951,110960,111355,113664,113770,113776,113788,113792,113800,
113808,113817,119808,119892,119894,119964,119966,119967,119970,119970,119973,
119974,119977,119980,119982,119993,119995,119995,119997,120003,120005,120069,
120071,120074,120077,120084,120086,120092,120094,120121,120123,120126,120128,
120132,120134,120134,120138,120144,120146,120485,120488,120512,120514,120538,
120540,120570,120572,120596,120598,120628,120630,120654,120656,120686,120688,
120712,120714,120744,120746,120770,120772,120779,122624,122654,122661,122666,
122928,122989,123136,123180,123191,123197,123214,123214,123536,123565,123584,
123627,124112,124139,124896,124902,124904,124907,124909,124910,124912,124926,
124928,125124,125184,125251,125259,125259,126464,126467,126469,126495,126497,
126498,126500,126500,126503,126503,126505,126514,126516,126519,126521,126521,
126523,126523,126530,126530,126535,126535,126537,126537,126539,126539,126541,
126543,126545,126546,126548,126548,126551,126551,126553,126553,126555,126555,
126557,126557,126559,126559,126561,126562,126564,126564,126567,126570,126572,
126578,126580,126583,126585,126588,126590,126590,126592,126601,126603,126619,
126625,126627,126629,126633,126635,126651,131072,173791,173824,177977,177984,
178205,178208,183969,183984,191456,194560,195101,196608,201546,201552,205743,
6,0,10,10,13,13,42,42,47,47,91,92,8232,8233,5,0,10,10,13,13,47,47,91,92,
8232,8233,4,0,10,10,13,13,92,93,8232,8233,1549,0,5,1,0,0,0,0,7,1,0,0,0,0,
9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,
0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,
0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,
161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,
1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,
0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,
0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,
0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,
0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,0,0,0,219,1,0,0,0,0,221,1,0,0,0,0,
223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,1,0,0,0,0,231,1,0,0,0,0,233,
1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,1,0,0,0,0,241,1,0,0,0,0,243,1,
0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,1,0,0,0,0,251,1,0,0,0,0,253,1,0,
0,0,0,255,1,0,0,0,0,257,1,0,0,0,0,259,1,0,0,0,0,261,1,0,0,0,0,263,1,0,0,
0,0,265,1,0,0,0,0,267,1,0,0,0,0,269,1,0,0,0,1,271,1,0,0,0,1,273,1,0,0,0,
1,275,1,0,0,0,2,277,1,0,0,0,2,279,1,0,0,0,2,281,1,0,0,0,2,283,1,0,0,0,2,
285,1,0,0,0,2,287,1,0,0,0,2,289,1,0,0,0,2,291,1,0,0,0,2,293,1,0,0,0,2,295,
1,0,0,0,2,297,1,0,0,0,3,299,1,0,0,0,3,301,1,0,0,0,3,303,1,0,0,0,3,305,1,
0,0,0,4,307,1,0,0,0,4,309,1,0,0,0,4,311,1,0,0,0,4,313,1,0,0,0,5,373,1,0,
0,0,7,383,1,0,0,0,9,388,1,0,0,0,11,390,1,0,0,0,13,392,1,0,0,0,15,394,1,0,
0,0,17,396,1,0,0,0,19,401,1,0,0,0,21,406,1,0,0,0,23,408,1,0,0,0,25,410,1,
0,0,0,27,412,1,0,0,0,29,414,1,0,0,0,31,416,1,0,0,0,33,420,1,0,0,0,35,422,
1,0,0,0,37,425,1,0,0,0,39,428,1,0,0,0,41,430,1,0,0,0,43,432,1,0,0,0,45,434,
1,0,0,0,47,436,1,0,0,0,49,438,1,0,0,0,51,440,1,0,0,0,53,442,1,0,0,0,55,445,
1,0,0,0,57,448,1,0,0,0,59,450,1,0,0,0,61,453,1,0,0,0,63,456,1,0,0,0,65,460,
1,0,0,0,67,462,1,0,0,0,69,464,1,0,0,0,71,467,1,0,0,0,73,470,1,0,0,0,75,473,
1,0,0,0,77,476,1,0,0,0,79,480,1,0,0,0,81,484,1,0,0,0,83,486,1,0,0,0,85,488,
1,0,0,0,87,490,1,0,0,0,89,493,1,0,0,0,91,496,1,0,0,0,93,499,1,0,0,0,95,502,
1,0,0,0,97,505,1,0,0,0,99,508,1,0,0,0,101,511,1,0,0,0,103,515,1,0,0,0,105,
519,1,0,0,0,107,524,1,0,0,0,109,527,1,0,0,0,111,530,1,0,0,0,113,533,1,0,
0,0,115,537,1,0,0,0,117,540,1,0,0,0,119,554,1,0,0,0,121,583,1,0,0,0,123,
585,1,0,0,0,125,594,1,0,0,0,127,602,1,0,0,0,129,611,1,0,0,0,131,620,1,0,
0,0,133,631,1,0,0,0,135,642,1,0,0,0,137,653,1,0,0,0,139,656,1,0,0,0,141,
662,1,0,0,0,143,665,1,0,0,0,145,676,1,0,0,0,147,683,1,0,0,0,149,688,1,0,
0,0,151,693,1,0,0,0,153,697,1,0,0,0,155,701,1,0,0,0,157,707,1,0,0,0,159,
715,1,0,0,0,161,722,1,0,0,0,163,727,1,0,0,0,165,736,1,0,0,0,167,740,1,0,
0,0,169,747,1,0,0,0,171,753,1,0,0,0,173,762,1,0,0,0,175,771,1,0,0,0,177,
776,1,0,0,0,179,781,1,0,0,0,181,789,1,0,0,0,183,792,1,0,0,0,185,798,1,0,
0,0,187,805,1,0,0,0,189,808,1,0,0,0,191,812,1,0,0,0,193,815,1,0,0,0,195,
820,1,0,0,0,197,827,1,0,0,0,199,833,1,0,0,0,201,838,1,0,0,0,203,846,1,0,
0,0,205,852,1,0,0,0,207,858,1,0,0,0,209,865,1,0,0,0,211,872,1,0,0,0,213,
878,1,0,0,0,215,884,1,0,0,0,217,890,1,0,0,0,219,897,1,0,0,0,221,901,1,0,
0,0,223,911,1,0,0,0,225,924,1,0,0,0,227,930,1,0,0,0,229,936,1,0,0,0,231,
946,1,0,0,0,233,955,1,0,0,0,235,967,1,0,0,0,237,977,1,0,0,0,239,989,1,0,
0,0,241,998,1,0,0,0,243,1006,1,0,0,0,245,1029,1,0,0,0,247,1048,1,0,0,0,249,
1059,1,0,0,0,251,1065,1,0,0,0,253,1071,1,0,0,0,255,1075,1,0,0,0,257,1091,
1,0,0,0,259,1105,1,0,0,0,261,1116,1,0,0,0,263,1132,1,0,0,0,265,1149,1,0,
0,0,267,1171,1,0,0,0,269,1175,1,0,0,0,271,1197,1,0,0,0,273,1203,1,0,0,0,
275,1208,1,0,0,0,277,1210,1,0,0,0,279,1214,1,0,0,0,281,1219,1,0,0,0,283,
1224,1,0,0,0,285,1226,1,0,0,0,287,1231,1,0,0,0,289,1239,1,0,0,0,291,1245,
1,0,0,0,293,1249,1,0,0,0,295,1263,1,0,0,0,297,1279,1,0,0,0,299,1282,1,0,
0,0,301,1286,1,0,0,0,303,1290,1,0,0,0,305,1296,1,0,0,0,307,1301,1,0,0,0,
309,1305,1,0,0,0,311,1312,1,0,0,0,313,1317,1,0,0,0,315,1324,1,0,0,0,317,
1327,1,0,0,0,319,1334,1,0,0,0,321,1341,1,0,0,0,323,1348,1,0,0,0,325,1357,
1,0,0,0,327,1367,1,0,0,0,329,1373,1,0,0,0,331,1375,1,0,0,0,333,1381,1,0,
0,0,335,1387,1,0,0,0,337,1394,1,0,0,0,339,1398,1,0,0,0,341,1400,1,0,0,0,
343,1420,1,0,0,0,345,1422,1,0,0,0,347,1431,1,0,0,0,349,1433,1,0,0,0,351,
1437,1,0,0,0,353,1439,1,0,0,0,355,1442,1,0,0,0,357,1452,1,0,0,0,359,1454,
1,0,0,0,361,1465,1,0,0,0,363,1470,1,0,0,0,365,1482,1,0,0,0,367,1494,1,0,
0,0,369,1498,1,0,0,0,371,1500,1,0,0,0,373,374,4,0,0,0,374,375,5,35,0,0,375,
376,5,33,0,0,376,380,1,0,0,0,377,379,8,0,0,0,378,377,1,0,0,0,379,382,1,0,
0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,6,1,0,0,0,382,380,1,0,0,0,383,384,
5,60,0,0,384,385,4,1,1,0,385,386,1,0,0,0,386,387,6,1,0,0,387,8,1,0,0,0,388,
389,5,91,0,0,389,10,1,0,0,0,390,391,5,93,0,0,391,12,1,0,0,0,392,393,5,40,
0,0,393,14,1,0,0,0,394,395,5,41,0,0,395,16,1,0,0,0,396,397,5,123,0,0,397,
398,6,6,1,0,398,399,1,0,0,0,399,400,6,6,2,0,400,18,1,0,0,0,401,402,5,125,
0,0,402,403,6,7,3,0,403,404,1,0,0,0,404,405,6,7,4,0,405,20,1,0,0,0,406,407,
5,59,0,0,407,22,1,0,0,0,408,409,5,44,0,0,409,24,1,0,0,0,410,411,5,61,0,0,
411,26,1,0,0,0,412,413,5,63,0,0,413,28,1,0,0,0,414,415,5,58,0,0,415,30,1,
0,0,0,416,417,5,46,0,0,417,418,5,46,0,0,418,419,5,46,0,0,419,32,1,0,0,0,
420,421,5,46,0,0,421,34,1,0,0,0,422,423,5,43,0,0,423,424,5,43,0,0,424,36,
1,0,0,0,425,426,5,45,0,0,426,427,5,45,0,0,427,38,1,0,0,0,428,429,5,43,0,
0,429,40,1,0,0,0,430,431,5,45,0,0,431,42,1,0,0,0,432,433,5,126,0,0,433,44,
1,0,0,0,434,435,5,33,0,0,435,46,1,0,0,0,436,437,5,42,0,0,437,48,1,0,0,0,
438,439,5,47,0,0,439,50,1,0,0,0,440,441,5,37,0,0,441,52,1,0,0,0,442,443,
5,42,0,0,443,444,5,42,0,0,444,54,1,0,0,0,445,446,5,63,0,0,446,447,5,63,0,
0,447,56,1,0,0,0,448,449,5,35,0,0,449,58,1,0,0,0,450,451,5,62,0,0,451,452,
5,62,0,0,452,60,1,0,0,0,453,454,5,60,0,0,454,455,5,60,0,0,455,62,1,0,0,0,
456,457,5,62,0,0,457,458,5,62,0,0,458,459,5,62,0,0,459,64,1,0,0,0,460,461,
5,60,0,0,461,66,1,0,0,0,462,463,5,62,0,0,463,68,1,0,0,0,464,465,5,60,0,0,
465,466,5,61,0,0,466,70,1,0,0,0,467,468,5,62,0,0,468,469,5,61,0,0,469,72,
1,0,0,0,470,471,5,61,0,0,471,472,5,61,0,0,472,74,1,0,0,0,473,474,5,33,0,
0,474,475,5,61,0,0,475,76,1,0,0,0,476,477,5,61,0,0,477,478,5,61,0,0,478,
479,5,61,0,0,479,78,1,0,0,0,480,481,5,33,0,0,481,482,5,61,0,0,482,483,5,
61,0,0,483,80,1,0,0,0,484,485,5,38,0,0,485,82,1,0,0,0,486,487,5,94,0,0,487,
84,1,0,0,0,488,489,5,124,0,0,489,86,1,0,0,0,490,491,5,38,0,0,491,492,5,38,
0,0,492,88,1,0,0,0,493,494,5,124,0,0,494,495,5,124,0,0,495,90,1,0,0,0,496,
497,5,42,0,0,497,498,5,61,0,0,498,92,1,0,0,0,499,500,5,47,0,0,500,501,5,
61,0,0,501,94,1,0,0,0,502,503,5,37,0,0,503,504,5,61,0,0,504,96,1,0,0,0,505,
506,5,43,0,0,506,507,5,61,0,0,507,98,1,0,0,0,508,509,5,45,0,0,509,510,5,
61,0,0,510,100,1,0,0,0,511,512,5,60,0,0,512,513,5,60,0,0,513,514,5,61,0,
0,514,102,1,0,0,0,515,516,5,62,0,0,516,517,5,62,0,0,517,518,5,61,0,0,518,
104,1,0,0,0,519,520,5,62,0,0,520,521,5,62,0,0,521,522,5,62,0,0,522,523,5,
61,0,0,523,106,1,0,0,0,524,525,5,38,0,0,525,526,5,61,0,0,526,108,1,0,0,0,
527,528,5,94,0,0,528,529,5,61,0,0,529,110,1,0,0,0,530,531,5,124,0,0,531,
532,5,61,0,0,532,112,1,0,0,0,533,534,5,42,0,0,534,535,5,42,0,0,535,536,5,
61,0,0,536,114,1,0,0,0,537,538,5,61,0,0,538,539,5,62,0,0,539,116,1,0,0,0,
540,541,5,110,0,0,541,542,5,117,0,0,542,543,5,108,0,0,543,544,5,108,0,0,
544,118,1,0,0,0,545,546,5,116,0,0,546,547,5,114,0,0,547,548,5,117,0,0,548,
555,5,101,0,0,549,550,5,102,0,0,550,551,5,97,0,0,551,552,5,108,0,0,552,553,
5,115,0,0,553,555,5,101,0,0,554,545,1,0,0,0,554,549,1,0,0,0,555,120,1,0,
0,0,556,557,3,357,176,0,557,558,5,46,0,0,558,562,7,1,0,0,559,561,7,2,0,0,
560,559,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,566,
1,0,0,0,564,562,1,0,0,0,565,567,3,359,177,0,566,565,1,0,0,0,566,567,1,0,
0,0,567,584,1,0,0,0,568,569,5,46,0,0,569,573,7,1,0,0,570,572,7,2,0,0,571,
570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,577,1,0,
0,0,575,573,1,0,0,0,576,578,3,359,177,0,577,576,1,0,0,0,577,578,1,0,0,0,
578,584,1,0,0,0,579,581,3,357,176,0,580,582,3,359,177,0,581,580,1,0,0,0,
581,582,1,0,0,0,582,584,1,0,0,0,583,556,1,0,0,0,583,568,1,0,0,0,583,579,
1,0,0,0,584,122,1,0,0,0,585,586,5,48,0,0,586,587,7,3,0,0,587,591,7,4,0,0,
588,590,3,355,175,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
592,1,0,0,0,592,124,1,0,0,0,593,591,1,0,0,0,594,596,5,48,0,0,595,597,7,5,
0,0,596,595,1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,
600,1,0,0,0,600,601,4,60,2,0,601,126,1,0,0,0,602,603,5,48,0,0,603,604,7,
6,0,0,604,608,7,5,0,0,605,607,7,7,0,0,606,605,1,0,0,0,607,610,1,0,0,0,608,
606,1,0,0,0,608,609,1,0,0,0,609,128,1,0,0,0,610,608,1,0,0,0,611,612,5,48,
0,0,612,613,7,8,0,0,613,617,7,9,0,0,614,616,7,10,0,0,615,614,1,0,0,0,616,
619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,130,1,0,0,0,619,617,1,0,
0,0,620,621,5,48,0,0,621,622,7,3,0,0,622,626,7,4,0,0,623,625,3,355,175,0,
624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,
1,0,0,0,628,626,1,0,0,0,629,630,5,110,0,0,630,132,1,0,0,0,631,632,5,48,0,
0,632,633,7,6,0,0,633,637,7,5,0,0,634,636,7,7,0,0,635,634,1,0,0,0,636,639,
1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,
640,641,5,110,0,0,641,134,1,0,0,0,642,643,5,48,0,0,643,644,7,8,0,0,644,648,
7,9,0,0,645,647,7,10,0,0,646,645,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,
648,649,1,0,0,0,649,651,1,0,0,0,650,648,1,0,0,0,651,652,5,110,0,0,652,136,
1,0,0,0,653,654,3,357,176,0,654,655,5,110,0,0,655,138,1,0,0,0,656,657,5,
98,0,0,657,658,5,114,0,0,658,659,5,101,0,0,659,660,5,97,0,0,660,661,5,107,
0,0,661,140,1,0,0,0,662,663,5,100,0,0,663,664,5,111,0,0,664,142,1,0,0,0,
665,666,5,105,0,0,666,667,5,110,0,0,667,668,5,115,0,0,668,669,5,116,0,0,
669,670,5,97,0,0,670,671,5,110,0,0,671,672,5,99,0,0,672,673,5,101,0,0,673,
674,5,111,0,0,674,675,5,102,0,0,675,144,1,0,0,0,676,677,5,116,0,0,677,678,
5,121,0,0,678,679,5,112,0,0,679,680,5,101,0,0,680,681,5,111,0,0,681,682,
5,102,0,0,682,146,1,0,0,0,683,684,5,99,0,0,684,685,5,97,0,0,685,686,5,115,
0,0,686,687,5,101,0,0,687,148,1,0,0,0,688,689,5,101,0,0,689,690,5,108,0,
0,690,691,5,115,0,0,691,692,5,101,0,0,692,150,1,0,0,0,693,694,5,110,0,0,
694,695,5,101,0,0,695,696,5,119,0,0,696,152,1,0,0,0,697,698,5,118,0,0,698,
699,5,97,0,0,699,700,5,114,0,0,700,154,1,0,0,0,701,702,5,99,0,0,702,703,
5,97,0,0,703,704,5,116,0,0,704,705,5,99,0,0,705,706,5,104,0,0,706,156,1,
0,0,0,707,708,5,102,0,0,708,709,5,105,0,0,709,710,5,110,0,0,710,711,5,97,
0,0,711,712,5,108,0,0,712,713,5,108,0,0,713,714,5,121,0,0,714,158,1,0,0,
0,715,716,5,114,0,0,716,717,5,101,0,0,717,718,5,116,0,0,718,719,5,117,0,
0,719,720,5,114,0,0,720,721,5,110,0,0,721,160,1,0,0,0,722,723,5,118,0,0,
723,724,5,111,0,0,724,725,5,105,0,0,725,726,5,100,0,0,726,162,1,0,0,0,727,
728,5,99,0,0,728,729,5,111,0,0,729,730,5,110,0,0,730,731,5,116,0,0,731,732,
5,105,0,0,732,733,5,110,0,0,733,734,5,117,0,0,734,735,5,101,0,0,735,164,
1,0,0,0,736,737,5,102,0,0,737,738,5,111,0,0,738,739,5,114,0,0,739,166,1,
0,0,0,740,741,5,115,0,0,741,742,5,119,0,0,742,743,5,105,0,0,743,744,5,116,
0,0,744,745,5,99,0,0,745,746,5,104,0,0,746,168,1,0,0,0,747,748,5,119,0,0,
748,749,5,104,0,0,749,750,5,105,0,0,750,751,5,108,0,0,751,752,5,101,0,0,
752,170,1,0,0,0,753,754,5,100,0,0,754,755,5,101,0,0,755,756,5,98,0,0,756,
757,5,117,0,0,757,758,5,103,0,0,758,759,5,103,0,0,759,760,5,101,0,0,760,
761,5,114,0,0,761,172,1,0,0,0,762,763,5,102,0,0,763,764,5,117,0,0,764,765,
5,110,0,0,765,766,5,99,0,0,766,767,5,116,0,0,767,768,5,105,0,0,768,769,5,
111,0,0,769,770,5,110,0,0,770,174,1,0,0,0,771,772,5,116,0,0,772,773,5,104,
0,0,773,774,5,105,0,0,774,775,5,115,0,0,775,176,1,0,0,0,776,777,5,119,0,
0,777,778,5,105,0,0,778,779,5,116,0,0,779,780,5,104,0,0,780,178,1,0,0,0,
781,782,5,100,0,0,782,783,5,101,0,0,783,784,5,102,0,0,784,785,5,97,0,0,785,
786,5,117,0,0,786,787,5,108,0,0,787,788,5,116,0,0,788,180,1,0,0,0,789,790,
5,105,0,0,790,791,5,102,0,0,791,182,1,0,0,0,792,793,5,116,0,0,793,794,5,
104,0,0,794,795,5,114,0,0,795,796,5,111,0,0,796,797,5,119,0,0,797,184,1,
0,0,0,798,799,5,100,0,0,799,800,5,101,0,0,800,801,5,108,0,0,801,802,5,101,
0,0,802,803,5,116,0,0,803,804,5,101,0,0,804,186,1,0,0,0,805,806,5,105,0,
0,806,807,5,110,0,0,807,188,1,0,0,0,808,809,5,116,0,0,809,810,5,114,0,0,
810,811,5,121,0,0,811,190,1,0,0,0,812,813,5,97,0,0,813,814,5,115,0,0,814,
192,1,0,0,0,815,816,5,102,0,0,816,817,5,114,0,0,817,818,5,111,0,0,818,819,
5,109,0,0,819,194,1,0,0,0,820,821,5,121,0,0,821,822,5,105,0,0,822,823,5,
101,0,0,823,824,5,108,0,0,824,825,5,100,0,0,825,826,5,42,0,0,826,196,1,0,
0,0,827,828,5,99,0,0,828,829,5,108,0,0,829,830,5,97,0,0,830,831,5,115,0,
0,831,832,5,115,0,0,832,198,1,0,0,0,833,834,5,101,0,0,834,835,5,110,0,0,
835,836,5,117,0,0,836,837,5,109,0,0,837,200,1,0,0,0,838,839,5,101,0,0,839,
840,5,120,0,0,840,841,5,116,0,0,841,842,5,101,0,0,842,843,5,110,0,0,843,
844,5,100,0,0,844,845,5,115,0,0,845,202,1,0,0,0,846,847,5,115,0,0,847,848,
5,117,0,0,848,849,5,112,0,0,849,850,5,101,0,0,850,851,5,114,0,0,851,204,
1,0,0,0,852,853,5,99,0,0,853,854,5,111,0,0,854,855,5,110,0,0,855,856,5,115,
0,0,856,857,5,116,0,0,857,206,1,0,0,0,858,859,5,101,0,0,859,860,5,120,0,
0,860,861,5,112,0,0,861,862,5,111,0,0,862,863,5,114,0,0,863,864,5,116,0,
0,864,208,1,0,0,0,865,866,5,105,0,0,866,867,5,109,0,0,867,868,5,112,0,0,
868,869,5,111,0,0,869,870,5,114,0,0,870,871,5,116,0,0,871,210,1,0,0,0,872,
873,5,97,0,0,873,874,5,115,0,0,874,875,5,121,0,0,875,876,5,110,0,0,876,877,
5,99,0,0,877,212,1,0,0,0,878,879,5,97,0,0,879,880,5,119,0,0,880,881,5,97,
0,0,881,882,5,105,0,0,882,883,5,116,0,0,883,214,1,0,0,0,884,885,5,115,0,
0,885,886,5,116,0,0,886,887,5,97,0,0,887,888,5,116,0,0,888,889,5,101,0,0,
889,216,1,0,0,0,890,891,5,101,0,0,891,892,5,102,0,0,892,893,5,102,0,0,893,
894,5,101,0,0,894,895,5,99,0,0,895,896,5,116,0,0,896,218,1,0,0,0,897,898,
5,114,0,0,898,899,5,101,0,0,899,900,5,102,0,0,900,220,1,0,0,0,901,902,5,
99,0,0,902,903,5,111,0,0,903,904,5,109,0,0,904,905,5,112,0,0,905,906,5,111,
0,0,906,907,5,110,0,0,907,908,5,101,0,0,908,909,5,110,0,0,909,910,5,116,
0,0,910,222,1,0,0,0,911,912,5,105,0,0,912,913,5,109,0,0,913,914,5,112,0,
0,914,915,5,108,0,0,915,916,5,101,0,0,916,917,5,109,0,0,917,918,5,101,0,
0,918,919,5,110,0,0,919,920,5,116,0,0,920,921,5,115,0,0,921,922,1,0,0,0,
922,923,4,109,3,0,923,224,1,0,0,0,924,925,5,108,0,0,925,926,5,101,0,0,926,
927,5,116,0,0,927,928,1,0,0,0,928,929,4,110,4,0,929,226,1,0,0,0,930,931,
5,108,0,0,931,932,5,101,0,0,932,933,5,116,0,0,933,934,1,0,0,0,934,935,4,
111,5,0,935,228,1,0,0,0,936,937,5,112,0,0,937,938,5,114,0,0,938,939,5,105,
0,0,939,940,5,118,0,0,940,941,5,97,0,0,941,942,5,116,0,0,942,943,5,101,0,
0,943,944,1,0,0,0,944,945,4,112,6,0,945,230,1,0,0,0,946,947,5,112,0,0,947,
948,5,117,0,0,948,949,5,98,0,0,949,950,5,108,0,0,950,951,5,105,0,0,951,952,
5,99,0,0,952,953,1,0,0,0,953,954,4,113,7,0,954,232,1,0,0,0,955,956,5,105,
0,0,956,957,5,110,0,0,957,958,5,116,0,0,958,959,5,101,0,0,959,960,5,114,
0,0,960,961,5,102,0,0,961,962,5,97,0,0,962,963,5,99,0,0,963,964,5,101,0,
0,964,965,1,0,0,0,965,966,4,114,8,0,966,234,1,0,0,0,967,968,5,112,0,0,968,
969,5,97,0,0,969,970,5,99,0,0,970,971,5,107,0,0,971,972,5,97,0,0,972,973,
5,103,0,0,973,974,5,101,0,0,974,975,1,0,0,0,975,976,4,115,9,0,976,236,1,
0,0,0,977,978,5,112,0,0,978,979,5,114,0,0,979,980,5,111,0,0,980,981,5,116,
0,0,981,982,5,101,0,0,982,983,5,99,0,0,983,984,5,116,0,0,984,985,5,101,0,
0,985,986,5,100,0,0,986,987,1,0,0,0,987,988,4,116,10,0,988,238,1,0,0,0,989,
990,5,115,0,0,990,991,5,116,0,0,991,992,5,97,0,0,992,993,5,116,0,0,993,994,
5,105,0,0,994,995,5,99,0,0,995,996,1,0,0,0,996,997,4,117,11,0,997,240,1,
0,0,0,998,999,5,121,0,0,999,1000,5,105,0,0,1000,1001,5,101,0,0,1001,1002,
5,108,0,0,1002,1003,5,100,0,0,1003,1004,1,0,0,0,1004,1005,4,118,12,0,1005,
242,1,0,0,0,1006,1010,3,363,179,0,1007,1009,3,361,178,0,1008,1007,1,0,0,
0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,244,1,0,0,0,
1012,1010,1,0,0,0,1013,1017,5,34,0,0,1014,1016,3,333,164,0,1015,1014,1,0,
0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,
0,0,1019,1017,1,0,0,0,1020,1030,5,34,0,0,1021,1025,5,39,0,0,1022,1024,3,
335,165,0,1023,1022,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,
1,0,0,0,1026,1028,1,0,0,0,1027,1025,1,0,0,0,1028,1030,5,39,0,0,1029,1013,
1,0,0,0,1029,1021,1,0,0,0,1030,1031,1,0,0,0,1031,1032,6,120,5,0,1032,246,
1,0,0,0,1033,1034,5,104,0,0,1034,1035,5,116,0,0,1035,1036,5,116,0,0,1036,
1037,5,112,0,0,1037,1039,1,0,0,0,1038,1040,5,115,0,0,1039,1038,1,0,0,0,1039,
1040,1,0,0,0,1040,1049,1,0,0,0,1041,1042,5,102,0,0,1042,1043,5,116,0,0,1043,
1049,5,112,0,0,1044,1045,5,102,0,0,1045,1046,5,105,0,0,1046,1047,5,108,0,
0,1047,1049,5,101,0,0,1048,1033,1,0,0,0,1048,1041,1,0,0,0,1048,1044,1,0,
0,0,1049,1050,1,0,0,0,1050,1051,5,58,0,0,1051,1052,5,47,0,0,1052,1053,5,
47,0,0,1053,1055,1,0,0,0,1054,1056,7,11,0,0,1055,1054,1,0,0,0,1056,1057,
1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,248,1,0,0,0,1059,1060,5,
96,0,0,1060,1061,6,122,6,0,1061,1062,1,0,0,0,1062,1063,6,122,7,0,1063,250,
1,0,0,0,1064,1066,7,12,0,0,1065,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1065,
1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1070,6,123,8,0,1070,252,
1,0,0,0,1071,1072,7,0,0,0,1072,1073,1,0,0,0,1073,1074,6,124,8,0,1074,254,
1,0,0,0,1075,1076,5,123,0,0,1076,1077,5,47,0,0,1077,1078,5,42,0,0,1078,1082,
1,0,0,0,1079,1081,9,0,0,0,1080,1079,1,0,0,0,1081,1084,1,0,0,0,1082,1083,
1,0,0,0,1082,1080,1,0,0,0,1083,1085,1,0,0,0,1084,1082,1,0,0,0,1085,1086,
5,42,0,0,1086,1087,5,47,0,0,1087,1088,5,125,0,0,1088,1089,1,0,0,0,1089,1090,
6,125,8,0,1090,256,1,0,0,0,1091,1092,5,47,0,0,1092,1093,5,42,0,0,1093,1097,
1,0,0,0,1094,1096,9,0,0,0,1095,1094,1,0,0,0,1096,1099,1,0,0,0,1097,1098,
1,0,0,0,1097,1095,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,1101,
5,42,0,0,1101,1102,5,47,0,0,1102,1103,1,0,0,0,1103,1104,6,126,8,0,1104,258,
1,0,0,0,1105,1106,5,47,0,0,1106,1107,5,47,0,0,1107,1111,1,0,0,0,1108,1110,
8,0,0,0,1109,1108,1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,
1,0,0,0,1112,1114,1,0,0,0,1113,1111,1,0,0,0,1114,1115,6,127,8,0,1115,260,
1,0,0,0,1116,1117,5,47,0,0,1117,1121,3,365,180,0,1118,1120,3,367,181,0,1119,
1118,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,
1124,1,0,0,0,1123,1121,1,0,0,0,1124,1125,4,128,13,0,1125,1129,5,47,0,0,1126,
1128,3,361,178,0,1127,1126,1,0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,
1130,1,0,0,0,1130,262,1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,60,0,0,1133,
1134,5,33,0,0,1134,1135,5,45,0,0,1135,1136,5,45,0,0,1136,1140,1,0,0,0,1137,
1139,9,0,0,0,1138,1137,1,0,0,0,1139,1142,1,0,0,0,1140,1141,1,0,0,0,1140,
1138,1,0,0,0,1141,1143,1,0,0,0,1142,1140,1,0,0,0,1143,1144,5,45,0,0,1144,
1145,5,45,0,0,1145,1146,5,62,0,0,1146,1147,1,0,0,0,1147,1148,6,129,8,0,1148,
264,1,0,0,0,1149,1150,5,60,0,0,1150,1151,5,33,0,0,1151,1152,5,91,0,0,1152,
1153,5,67,0,0,1153,1154,5,68,0,0,1154,1155,5,65,0,0,1155,1156,5,84,0,0,1156,
1157,5,65,0,0,1157,1158,5,91,0,0,1158,1162,1,0,0,0,1159,1161,9,0,0,0,1160,
1159,1,0,0,0,1161,1164,1,0,0,0,1162,1163,1,0,0,0,1162,1160,1,0,0,0,1163,
1165,1,0,0,0,1164,1162,1,0,0,0,1165,1166,5,93,0,0,1166,1167,5,93,0,0,1167,
1168,5,62,0,0,1168,1169,1,0,0,0,1169,1170,6,130,8,0,1170,266,1,0,0,0,1171,
1172,9,0,0,0,1172,1173,1,0,0,0,1173,1174,6,131,9,0,1174,268,1,0,0,0,1175,
1176,5,60,0,0,1176,1177,5,33,0,0,1177,1178,5,91,0,0,1178,1179,5,67,0,0,1179,
1180,5,68,0,0,1180,1181,5,65,0,0,1181,1182,5,84,0,0,1182,1183,5,65,0,0,1183,
1184,5,91,0,0,1184,1188,1,0,0,0,1185,1187,9,0,0,0,1186,1185,1,0,0,0,1187,
1190,1,0,0,0,1188,1189,1,0,0,0,1188,1186,1,0,0,0,1189,1191,1,0,0,0,1190,
1188,1,0,0,0,1191,1192,5,93,0,0,1192,1193,5,93,0,0,1193,1194,5,62,0,0,1194,
1195,1,0,0,0,1195,1196,6,132,8,0,1196,270,1,0,0,0,1197,1198,5,96,0,0,1198,
1199,6,133,10,0,1199,1200,1,0,0,0,1200,1201,6,133,11,0,1201,1202,6,133,4,
0,1202,272,1,0,0,0,1203,1204,5,36,0,0,1204,1205,5,123,0,0,1205,1206,1,0,
0,0,1206,1207,6,134,2,0,1207,274,1,0,0,0,1208,1209,8,13,0,0,1209,276,1,0,
0,0,1210,1211,5,60,0,0,1211,1212,1,0,0,0,1212,1213,6,136,0,0,1213,278,1,
0,0,0,1214,1215,5,62,0,0,1215,1216,1,0,0,0,1216,1217,6,137,4,0,1217,1218,
6,137,12,0,1218,280,1,0,0,0,1219,1220,5,47,0,0,1220,1221,5,62,0,0,1221,1222,
1,0,0,0,1222,1223,6,138,4,0,1223,282,1,0,0,0,1224,1225,5,61,0,0,1225,284,
1,0,0,0,1226,1227,5,123,0,0,1227,1228,6,140,13,0,1228,1229,1,0,0,0,1229,
1230,6,140,2,0,1230,286,1,0,0,0,1231,1235,3,327,161,0,1232,1234,3,329,162,
0,1233,1232,1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,
0,1236,288,1,0,0,0,1237,1235,1,0,0,0,1238,1240,7,12,0,0,1239,1238,1,0,0,
0,1240,1241,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,
0,1243,1244,6,142,8,0,1244,290,1,0,0,0,1245,1246,7,0,0,0,1246,1247,1,0,0,
0,1247,1248,6,143,8,0,1248,292,1,0,0,0,1249,1250,5,47,0,0,1250,1251,5,42,
0,0,1251,1255,1,0,0,0,1252,1254,9,0,0,0,1253,1252,1,0,0,0,1254,1257,1,0,
0,0,1255,1256,1,0,0,0,1255,1253,1,0,0,0,1256,1258,1,0,0,0,1257,1255,1,0,
0,0,1258,1259,5,42,0,0,1259,1260,5,47,0,0,1260,1261,1,0,0,0,1261,1262,6,
144,8,0,1262,294,1,0,0,0,1263,1264,5,47,0,0,1264,1265,5,47,0,0,1265,1269,
1,0,0,0,1266,1268,8,0,0,0,1267,1266,1,0,0,0,1268,1271,1,0,0,0,1269,1267,
1,0,0,0,1269,1270,1,0,0,0,1270,1272,1,0,0,0,1271,1269,1,0,0,0,1272,1273,
6,145,8,0,1273,296,1,0,0,0,1274,1280,3,323,159,0,1275,1280,3,325,160,0,1276,
1280,3,315,155,0,1277,1280,3,319,157,0,1278,1280,3,321,158,0,1279,1274,1,
0,0,0,1279,1275,1,0,0,0,1279,1276,1,0,0,0,1279,1277,1,0,0,0,1279,1278,1,
0,0,0,1280,298,1,0,0,0,1281,1283,8,14,0,0,1282,1281,1,0,0,0,1283,1284,1,
0,0,0,1284,1282,1,0,0,0,1284,1285,1,0,0,0,1285,300,1,0,0,0,1286,1287,5,60,
0,0,1287,1288,1,0,0,0,1288,1289,6,148,0,0,1289,302,1,0,0,0,1290,1291,5,60,
0,0,1291,1292,5,47,0,0,1292,1293,1,0,0,0,1293,1294,6,149,4,0,1294,1295,6,
149,14,0,1295,304,1,0,0,0,1296,1297,5,123,0,0,1297,1298,6,150,15,0,1298,
1299,1,0,0,0,1299,1300,6,150,2,0,1300,306,1,0,0,0,1301,1302,5,62,0,0,1302,
1303,1,0,0,0,1303,1304,6,151,4,0,1304,308,1,0,0,0,1305,1309,3,327,161,0,
1306,1308,3,329,162,0,1307,1306,1,0,0,0,1308,1311,1,0,0,0,1309,1307,1,0,
0,0,1309,1310,1,0,0,0,1310,310,1,0,0,0,1311,1309,1,0,0,0,1312,1313,7,0,0,
0,1313,1314,1,0,0,0,1314,1315,6,153,8,0,1315,312,1,0,0,0,1316,1318,7,12,
0,0,1317,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,
0,0,1320,1321,1,0,0,0,1321,1322,6,154,8,0,1322,314,1,0,0,0,1323,1325,7,15,
0,0,1324,1323,1,0,0,0,1325,316,1,0,0,0,1326,1328,3,315,155,0,1327,1326,1,
0,0,0,1328,1329,1,0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,1332,1,
0,0,0,1331,1333,5,32,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,318,1,
0,0,0,1334,1336,5,35,0,0,1335,1337,7,4,0,0,1336,1335,1,0,0,0,1337,1338,1,
0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,320,1,0,0,0,1340,1342,7,1,
0,0,1341,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,
0,0,1344,1346,1,0,0,0,1345,1347,5,37,0,0,1346,1345,1,0,0,0,1346,1347,1,0,
0,0,1347,322,1,0,0,0,1348,1352,5,34,0,0,1349,1351,8,16,0,0,1350,1349,1,0,
0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,1355,1,0,
0,0,1354,1352,1,0,0,0,1355,1356,5,34,0,0,1356,324,1,0,0,0,1357,1361,5,39,
0,0,1358,1360,8,17,0,0,1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,
0,0,1361,1362,1,0,0,0,1362,1364,1,0,0,0,1363,1361,1,0,0,0,1364,1365,5,39,
0,0,1365,326,1,0,0,0,1366,1368,7,18,0,0,1367,1366,1,0,0,0,1368,328,1,0,0,
0,1369,1374,3,327,161,0,1370,1374,7,19,0,0,1371,1374,3,331,163,0,1372,1374,
7,20,0,0,1373,1369,1,0,0,0,1373,1370,1,0,0,0,1373,1371,1,0,0,0,1373,1372,
1,0,0,0,1374,330,1,0,0,0,1375,1376,7,1,0,0,1376,332,1,0,0,0,1377,1382,8,
21,0,0,1378,1379,5,92,0,0,1379,1382,3,337,166,0,1380,1382,3,353,174,0,1381,
1377,1,0,0,0,1381,1378,1,0,0,0,1381,1380,1,0,0,0,1382,334,1,0,0,0,1383,1388,
8,22,0,0,1384,1385,5,92,0,0,1385,1388,3,337,166,0,1386,1388,3,353,174,0,
1387,1383,1,0,0,0,1387,1384,1,0,0,0,1387,1386,1,0,0,0,1388,336,1,0,0,0,1389,
1395,3,339,167,0,1390,1395,5,48,0,0,1391,1395,3,341,168,0,1392,1395,3,343,
169,0,1393,1395,3,345,170,0,1394,1389,1,0,0,0,1394,1390,1,0,0,0,1394,1391,
1,0,0,0,1394,1392,1,0,0,0,1394,1393,1,0,0,0,1395,338,1,0,0,0,1396,1399,3,
347,171,0,1397,1399,3,349,172,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,
340,1,0,0,0,1400,1401,5,120,0,0,1401,1402,3,355,175,0,1402,1403,3,355,175,
0,1403,342,1,0,0,0,1404,1405,5,117,0,0,1405,1406,3,355,175,0,1406,1407,3,
355,175,0,1407,1408,3,355,175,0,1408,1409,3,355,175,0,1409,1421,1,0,0,0,
1410,1411,5,117,0,0,1411,1412,5,123,0,0,1412,1414,3,355,175,0,1413,1415,
3,355,175,0,1414,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1414,1,0,0,0,1416,1417,
1,0,0,0,1417,1418,1,0,0,0,1418,1419,5,125,0,0,1419,1421,1,0,0,0,1420,1404,
1,0,0,0,1420,1410,1,0,0,0,1421,344,1,0,0,0,1422,1423,5,117,0,0,1423,1425,
5,123,0,0,1424,1426,3,355,175,0,1425,1424,1,0,0,0,1426,1427,1,0,0,0,1427,
1425,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1430,5,125,0,0,1430,
346,1,0,0,0,1431,1432,7,23,0,0,1432,348,1,0,0,0,1433,1434,8,24,0,0,1434,
350,1,0,0,0,1435,1438,3,347,171,0,1436,1438,7,25,0,0,1437,1435,1,0,0,0,1437,
1436,1,0,0,0,1438,352,1,0,0,0,1439,1440,5,92,0,0,1440,1441,7,0,0,0,1441,
354,1,0,0,0,1442,1443,7,26,0,0,1443,356,1,0,0,0,1444,1453,5,48,0,0,1445,
1449,7,27,0,0,1446,1448,7,2,0,0,1447,1446,1,0,0,0,1448,1451,1,0,0,0,1449,
1447,1,0,0,0,1449,1450,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,0,1452,
1444,1,0,0,0,1452,1445,1,0,0,0,1453,358,1,0,0,0,1454,1456,7,28,0,0,1455,
1457,7,29,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1459,1,0,0,0,1458,
1460,7,2,0,0,1459,1458,1,0,0,0,1460,1461,1,0,0,0,1461,1459,1,0,0,0,1461,
1462,1,0,0,0,1462,360,1,0,0,0,1463,1466,3,363,179,0,1464,1466,7,30,0,0,1465,
1463,1,0,0,0,1465,1464,1,0,0,0,1466,362,1,0,0,0,1467,1471,7,31,0,0,1468,
1469,5,92,0,0,1469,1471,3,343,169,0,1470,1467,1,0,0,0,1470,1468,1,0,0,0,
1471,364,1,0,0,0,1472,1483,8,32,0,0,1473,1483,3,371,183,0,1474,1478,5,91,
0,0,1475,1477,3,369,182,0,1476,1475,1,0,0,0,1477,1480,1,0,0,0,1478,1476,
1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,1478,1,0,0,0,1481,1483,
5,93,0,0,1482,1472,1,0,0,0,1482,1473,1,0,0,0,1482,1474,1,0,0,0,1483,366,
1,0,0,0,1484,1495,8,33,0,0,1485,1495,3,371,183,0,1486,1490,5,91,0,0,1487,
1489,3,369,182,0,1488,1487,1,0,0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,1490,
1491,1,0,0,0,1491,1493,1,0,0,0,1492,1490,1,0,0,0,1493,1495,5,93,0,0,1494,
1484,1,0,0,0,1494,1485,1,0,0,0,1494,1486,1,0,0,0,1495,368,1,0,0,0,1496,1499,
8,34,0,0,1497,1499,3,371,183,0,1498,1496,1,0,0,0,1498,1497,1,0,0,0,1499,
370,1,0,0,0,1500,1501,5,92,0,0,1501,1502,8,0,0,0,1502,372,1,0,0,0,73,0,1,
2,3,4,380,554,562,566,573,577,581,583,591,598,608,617,626,637,648,1010,1017,
1025,1029,1039,1048,1057,1067,1082,1097,1111,1121,1129,1140,1162,1188,1235,
1241,1255,1269,1279,1284,1309,1319,1324,1329,1332,1338,1343,1346,1352,1361,
1367,1373,1381,1387,1394,1398,1416,1420,1427,1437,1449,1452,1456,1461,1465,
1470,1478,1482,1490,1494,1498,16,5,2,0,1,6,0,5,0,0,1,7,1,4,0,0,1,120,2,1,
122,3,5,1,0,0,1,0,0,2,0,1,133,4,7,123,0,5,3,0,1,140,5,5,4,0,1,150,6];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class JavaScriptLexer extends JavaScriptLexerBase {

    static grammarFileName = "JavaScriptLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR" ];
	static modeNames = [ "DEFAULT_MODE", "TEMPLATE", "JSX_OPENING_ELEMENT", 
                      "JSX_CHILDREN", "JSX_CLOSING_ELEMENT" ];
	static literalNames = [ null, null, null, "'['", "']'", "'('", "')'", null, 
                         null, "';'", "','", null, "'?'", "':'", "'...'", 
                         "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                         "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
                         "'<<'", "'>>>'", null, null, "'<='", "'>='", "'=='", 
                         "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                         "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", 
                         "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", 
                         "'|='", "'**='", "'=>'", "'null'", null, null, 
                         null, null, null, null, null, null, null, null, 
                         "'break'", "'do'", "'instanceof'", "'typeof'", 
                         "'case'", "'else'", "'new'", "'var'", "'catch'", 
                         "'finally'", "'return'", "'void'", "'continue'", 
                         "'for'", "'switch'", "'while'", "'debugger'", "'function'", 
                         "'this'", "'with'", "'default'", "'if'", "'throw'", 
                         "'delete'", "'in'", "'try'", "'as'", "'from'", 
                         "'yield*'", "'class'", "'enum'", "'extends'", "'super'", 
                         "'const'", "'export'", "'import'", "'async'", "'await'", 
                         "'state'", "'effect'", "'ref'", "'component'", 
                         "'implements'", null, null, "'private'", "'public'", 
                         "'interface'", "'package'", "'protected'", "'static'", 
                         "'yield'", null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         "'${'", null, null, null, "'/>'", null, null, null, 
                         null, null, null, null, null, null, null, "'</'" ];
	static symbolicNames = [ null, "HashBangLine", "JsxElementBegin", "OpenBracket", 
                          "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
                          "CloseBrace", "SemiColon", "Comma", "Assign", 
                          "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", 
                          "MinusMinus", "Plus", "Minus", "BitNot", "Not", 
                          "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", 
                          "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
                          "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
                          "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", 
                          "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", 
                          "And", "Or", "MultiplyAssign", "DivideAssign", 
                          "ModulusAssign", "PlusAssign", "MinusAssign", 
                          "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                          "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                          "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                          "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                          "OctalIntegerLiteral", "OctalIntegerLiteral2", 
                          "BinaryIntegerLiteral", "BigHexIntegerLiteral", 
                          "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
                          "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", 
                          "Typeof", "Case", "Else", "New", "Var", "Catch", 
                          "Finally", "Return", "Void", "Continue", "For", 
                          "Switch", "While", "Debugger", "Function_", "This", 
                          "With", "Default", "If", "Throw", "Delete", "In", 
                          "Try", "As", "From", "YieldStar", "Class", "Enum", 
                          "Extends", "Super", "Const", "Export", "Import", 
                          "Async", "Await", "STATE", "EFFECT", "REF", "COMPONENT", 
                          "Implements", "StrictLet", "NonStrictLet", "Private", 
                          "Public", "Interface", "Package", "Protected", 
                          "Static", "Yield", "Identifier", "StringLiteral", 
                          "LinkLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
                          "JsxComment", "MultiLineComment", "SingleLineComment", 
                          "RegularExpressionLiteral", "HtmlComment", "CDataComment", 
                          "UnexpectedCharacter", "CDATA", "TemplateStringStartExpression", 
                          "TemplateStringAtom", "JsxOpeningElementBegin", 
                          "JsxOpeningElementEnd", "JsxOpeningElementSlashEnd", 
                          "JsxAssign", "JsxOpeningElementOpenBrace", "JsxOpeningElementId", 
                          "JsxOpeningElementWhiteSpaces", "JsxOpeningElementLineTerminator", 
                          "JsxOpeningElementMultiLineComment", "JsxOpeningElementSingleLineComment", 
                          "JsxAttributeValue", "HtmlChardata", "JsxChildrenOpeningElementBegin", 
                          "JsxChildrenClosingElementSlashBegin", "JsxChildrenOpenBrace", 
                          "JsxClosingElementEnd", "JsxClosingElementId", 
                          "JsxClosingElementLineTerminator", "JsxClosingElementWhiteSpaces" ];
	static ruleNames = [ "HashBangLine", "JsxElementBegin", "OpenBracket", 
                      "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
                      "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
                      "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                      "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
                      "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                      "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function_", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "YieldStar", 
                      "Class", "Enum", "Extends", "Super", "Const", "Export", 
                      "Import", "Async", "Await", "STATE", "EFFECT", "REF", 
                      "COMPONENT", "Implements", "StrictLet", "NonStrictLet", 
                      "Private", "Public", "Interface", "Package", "Protected", 
                      "Static", "Yield", "Identifier", "StringLiteral", 
                      "LinkLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
                      "JsxComment", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "HtmlComment", "CDataComment", 
                      "UnexpectedCharacter", "CDATA", "BackTickInside", 
                      "TemplateStringStartExpression", "TemplateStringAtom", 
                      "JsxOpeningElementBegin", "JsxOpeningElementEnd", 
                      "JsxOpeningElementSlashEnd", "JsxAssign", "JsxOpeningElementOpenBrace", 
                      "JsxOpeningElementId", "JsxOpeningElementWhiteSpaces", 
                      "JsxOpeningElementLineTerminator", "JsxOpeningElementMultiLineComment", 
                      "JsxOpeningElementSingleLineComment", "JsxAttributeValue", 
                      "HtmlChardata", "JsxChildrenOpeningElementBegin", 
                      "JsxChildrenClosingElementSlashBegin", "JsxChildrenOpenBrace", 
                      "JsxClosingElementEnd", "JsxClosingElementId", "JsxClosingElementLineTerminator", 
                      "JsxClosingElementWhiteSpaces", "AttributeChar", "AttributeChars", 
                      "HexChars", "DecChars", "DoubleQuoteString", "SingleQuoteString", 
                      "TagNameStartChar", "TagNameChar", "Digit", "DoubleStringCharacter", 
                      "SingleStringCharacter", "EscapeSequence", "CharacterEscapeSequence", 
                      "HexEscapeSequence", "UnicodeEscapeSequence", "ExtendedUnicodeEscapeSequence", 
                      "SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", 
                      "LineContinuation", "HexDigit", "DecimalIntegerLiteral", 
                      "ExponentPart", "IdentifierPart", "IdentifierStart", 
                      "RegularExpressionFirstChar", "RegularExpressionChar", 
                      "RegularExpressionClassChar", "RegularExpressionBackslashSequence" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

JavaScriptLexer.EOF = antlr4.Token.EOF;
JavaScriptLexer.HashBangLine = 1;
JavaScriptLexer.JsxElementBegin = 2;
JavaScriptLexer.OpenBracket = 3;
JavaScriptLexer.CloseBracket = 4;
JavaScriptLexer.OpenParen = 5;
JavaScriptLexer.CloseParen = 6;
JavaScriptLexer.OpenBrace = 7;
JavaScriptLexer.CloseBrace = 8;
JavaScriptLexer.SemiColon = 9;
JavaScriptLexer.Comma = 10;
JavaScriptLexer.Assign = 11;
JavaScriptLexer.QuestionMark = 12;
JavaScriptLexer.Colon = 13;
JavaScriptLexer.Ellipsis = 14;
JavaScriptLexer.Dot = 15;
JavaScriptLexer.PlusPlus = 16;
JavaScriptLexer.MinusMinus = 17;
JavaScriptLexer.Plus = 18;
JavaScriptLexer.Minus = 19;
JavaScriptLexer.BitNot = 20;
JavaScriptLexer.Not = 21;
JavaScriptLexer.Multiply = 22;
JavaScriptLexer.Divide = 23;
JavaScriptLexer.Modulus = 24;
JavaScriptLexer.Power = 25;
JavaScriptLexer.NullCoalesce = 26;
JavaScriptLexer.Hashtag = 27;
JavaScriptLexer.RightShiftArithmetic = 28;
JavaScriptLexer.LeftShiftArithmetic = 29;
JavaScriptLexer.RightShiftLogical = 30;
JavaScriptLexer.LessThan = 31;
JavaScriptLexer.MoreThan = 32;
JavaScriptLexer.LessThanEquals = 33;
JavaScriptLexer.GreaterThanEquals = 34;
JavaScriptLexer.Equals_ = 35;
JavaScriptLexer.NotEquals = 36;
JavaScriptLexer.IdentityEquals = 37;
JavaScriptLexer.IdentityNotEquals = 38;
JavaScriptLexer.BitAnd = 39;
JavaScriptLexer.BitXOr = 40;
JavaScriptLexer.BitOr = 41;
JavaScriptLexer.And = 42;
JavaScriptLexer.Or = 43;
JavaScriptLexer.MultiplyAssign = 44;
JavaScriptLexer.DivideAssign = 45;
JavaScriptLexer.ModulusAssign = 46;
JavaScriptLexer.PlusAssign = 47;
JavaScriptLexer.MinusAssign = 48;
JavaScriptLexer.LeftShiftArithmeticAssign = 49;
JavaScriptLexer.RightShiftArithmeticAssign = 50;
JavaScriptLexer.RightShiftLogicalAssign = 51;
JavaScriptLexer.BitAndAssign = 52;
JavaScriptLexer.BitXorAssign = 53;
JavaScriptLexer.BitOrAssign = 54;
JavaScriptLexer.PowerAssign = 55;
JavaScriptLexer.ARROW = 56;
JavaScriptLexer.NullLiteral = 57;
JavaScriptLexer.BooleanLiteral = 58;
JavaScriptLexer.DecimalLiteral = 59;
JavaScriptLexer.HexIntegerLiteral = 60;
JavaScriptLexer.OctalIntegerLiteral = 61;
JavaScriptLexer.OctalIntegerLiteral2 = 62;
JavaScriptLexer.BinaryIntegerLiteral = 63;
JavaScriptLexer.BigHexIntegerLiteral = 64;
JavaScriptLexer.BigOctalIntegerLiteral = 65;
JavaScriptLexer.BigBinaryIntegerLiteral = 66;
JavaScriptLexer.BigDecimalIntegerLiteral = 67;
JavaScriptLexer.Break = 68;
JavaScriptLexer.Do = 69;
JavaScriptLexer.Instanceof = 70;
JavaScriptLexer.Typeof = 71;
JavaScriptLexer.Case = 72;
JavaScriptLexer.Else = 73;
JavaScriptLexer.New = 74;
JavaScriptLexer.Var = 75;
JavaScriptLexer.Catch = 76;
JavaScriptLexer.Finally = 77;
JavaScriptLexer.Return = 78;
JavaScriptLexer.Void = 79;
JavaScriptLexer.Continue = 80;
JavaScriptLexer.For = 81;
JavaScriptLexer.Switch = 82;
JavaScriptLexer.While = 83;
JavaScriptLexer.Debugger = 84;
JavaScriptLexer.Function_ = 85;
JavaScriptLexer.This = 86;
JavaScriptLexer.With = 87;
JavaScriptLexer.Default = 88;
JavaScriptLexer.If = 89;
JavaScriptLexer.Throw = 90;
JavaScriptLexer.Delete = 91;
JavaScriptLexer.In = 92;
JavaScriptLexer.Try = 93;
JavaScriptLexer.As = 94;
JavaScriptLexer.From = 95;
JavaScriptLexer.YieldStar = 96;
JavaScriptLexer.Class = 97;
JavaScriptLexer.Enum = 98;
JavaScriptLexer.Extends = 99;
JavaScriptLexer.Super = 100;
JavaScriptLexer.Const = 101;
JavaScriptLexer.Export = 102;
JavaScriptLexer.Import = 103;
JavaScriptLexer.Async = 104;
JavaScriptLexer.Await = 105;
JavaScriptLexer.STATE = 106;
JavaScriptLexer.EFFECT = 107;
JavaScriptLexer.REF = 108;
JavaScriptLexer.COMPONENT = 109;
JavaScriptLexer.Implements = 110;
JavaScriptLexer.StrictLet = 111;
JavaScriptLexer.NonStrictLet = 112;
JavaScriptLexer.Private = 113;
JavaScriptLexer.Public = 114;
JavaScriptLexer.Interface = 115;
JavaScriptLexer.Package = 116;
JavaScriptLexer.Protected = 117;
JavaScriptLexer.Static = 118;
JavaScriptLexer.Yield = 119;
JavaScriptLexer.Identifier = 120;
JavaScriptLexer.StringLiteral = 121;
JavaScriptLexer.LinkLiteral = 122;
JavaScriptLexer.BackTick = 123;
JavaScriptLexer.WhiteSpaces = 124;
JavaScriptLexer.LineTerminator = 125;
JavaScriptLexer.JsxComment = 126;
JavaScriptLexer.MultiLineComment = 127;
JavaScriptLexer.SingleLineComment = 128;
JavaScriptLexer.RegularExpressionLiteral = 129;
JavaScriptLexer.HtmlComment = 130;
JavaScriptLexer.CDataComment = 131;
JavaScriptLexer.UnexpectedCharacter = 132;
JavaScriptLexer.CDATA = 133;
JavaScriptLexer.TemplateStringStartExpression = 134;
JavaScriptLexer.TemplateStringAtom = 135;
JavaScriptLexer.JsxOpeningElementBegin = 136;
JavaScriptLexer.JsxOpeningElementEnd = 137;
JavaScriptLexer.JsxOpeningElementSlashEnd = 138;
JavaScriptLexer.JsxAssign = 139;
JavaScriptLexer.JsxOpeningElementOpenBrace = 140;
JavaScriptLexer.JsxOpeningElementId = 141;
JavaScriptLexer.JsxOpeningElementWhiteSpaces = 142;
JavaScriptLexer.JsxOpeningElementLineTerminator = 143;
JavaScriptLexer.JsxOpeningElementMultiLineComment = 144;
JavaScriptLexer.JsxOpeningElementSingleLineComment = 145;
JavaScriptLexer.JsxAttributeValue = 146;
JavaScriptLexer.HtmlChardata = 147;
JavaScriptLexer.JsxChildrenOpeningElementBegin = 148;
JavaScriptLexer.JsxChildrenClosingElementSlashBegin = 149;
JavaScriptLexer.JsxChildrenOpenBrace = 150;
JavaScriptLexer.JsxClosingElementEnd = 151;
JavaScriptLexer.JsxClosingElementId = 152;
JavaScriptLexer.JsxClosingElementLineTerminator = 153;
JavaScriptLexer.JsxClosingElementWhiteSpaces = 154;

JavaScriptLexer.ERROR = 2;

JavaScriptLexer.TEMPLATE = 1;
JavaScriptLexer.JSX_OPENING_ELEMENT = 2;
JavaScriptLexer.JSX_CHILDREN = 3;
JavaScriptLexer.JSX_CLOSING_ELEMENT = 4;


JavaScriptLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 6:
		this.OpenBrace_action(localctx, actionIndex);
		break;
	case 7:
		this.CloseBrace_action(localctx, actionIndex);
		break;
	case 120:
		this.StringLiteral_action(localctx, actionIndex);
		break;
	case 122:
		this.BackTick_action(localctx, actionIndex);
		break;
	case 133:
		this.BackTickInside_action(localctx, actionIndex);
		break;
	case 140:
		this.JsxOpeningElementOpenBrace_action(localctx, actionIndex);
		break;
	case 150:
		this.JsxChildrenOpenBrace_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};


JavaScriptLexer.prototype.OpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.CloseBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		this.ProcessCloseBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.StringLiteral_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		this.ProcessStringLiteral();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.BackTick_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 3:
		this.IncreaseTemplateDepth();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.BackTickInside_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 4:
		this.DecreaseTemplateDepth();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.JsxOpeningElementOpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 5:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

JavaScriptLexer.prototype.JsxChildrenOpenBrace_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 6:
		this.ProcessOpenBrace();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
JavaScriptLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 0:
			return this.HashBangLine_sempred(localctx, predIndex);
		case 1:
			return this.JsxElementBegin_sempred(localctx, predIndex);
		case 60:
			return this.OctalIntegerLiteral_sempred(localctx, predIndex);
		case 109:
			return this.Implements_sempred(localctx, predIndex);
		case 110:
			return this.StrictLet_sempred(localctx, predIndex);
		case 111:
			return this.NonStrictLet_sempred(localctx, predIndex);
		case 112:
			return this.Private_sempred(localctx, predIndex);
		case 113:
			return this.Public_sempred(localctx, predIndex);
		case 114:
			return this.Interface_sempred(localctx, predIndex);
		case 115:
			return this.Package_sempred(localctx, predIndex);
		case 116:
			return this.Protected_sempred(localctx, predIndex);
		case 117:
			return this.Static_sempred(localctx, predIndex);
		case 118:
			return this.Yield_sempred(localctx, predIndex);
		case 128:
			return this.RegularExpressionLiteral_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

JavaScriptLexer.prototype.HashBangLine_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.IsStartOfFile();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.JsxElementBegin_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.IsJsxPossible();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.OctalIntegerLiteral_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return !this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Implements_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.StrictLet_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.NonStrictLet_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return !this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Private_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Public_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Interface_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Package_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Protected_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Static_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.IsStrictMode();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptLexer.prototype.RegularExpressionLiteral_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.IsRegexPossible();
		default:
			throw "No predicate with index:" + predIndex;
	}
};




